#!/usr/bin/env bash
set -euo pipefail

_usage() {
  cat <<EOF
Usage: $0 [-s name|ref|exc|id] <btrfs-root-directory>

  -s, --sort-by   sort key: name (default), ref (Usage referenced),
                  exc (Usage exclusive), or id (Subvolume ID)
EOF
  exit 1
}

# defaults
sort_by="name"

# parse options
while [[ $# -gt 0 && "$1" =~ ^- ]]; do
  case "$1" in
    -s|--sort-by)
      [[ $# -lt 2 ]] && _usage
      sort_by="$2"; shift 2;;
    -h|--help) _usage;;
    *) echo "Unknown option: $1" >&2; _usage;;
  esac
done

[[ $# -ne 1 ]] && _usage
root=${1%/}
root_base=$(basename "$root")

# choose sort
case "$sort_by" in
  name) sort_cmd=(sort -t$'\t' -k2,2) ;;
  ref)  sort_cmd=(sort -t$'\t' -k3,3h) ;;
  exc)  sort_cmd=(sort -t$'\t' -k4,4h) ;;
  id)   sort_cmd=(sort -t$'\t' -k1,1n) ;;
  *)
    echo "Invalid sort key: $sort_by" >&2
    _usage
    ;;
esac

# generate raw rows
generate_rows() {
  btrfs subvolume list -o -r "$root" \
    | awk -F' path ' '{print $2}' \
    | while IFS= read -r rel; do
        rel="${rel##+([[:space:]])}"
        rel="${rel%%+([[:space:]])}"

        candidate="$root/$rel"
        [[ ! -e "$candidate" ]] && candidate="$root/${rel#"$root_base"/}"
        [[ ! -e "$candidate" ]] && { echo "Warning: cannot find path '$rel'" >&2; continue; }

        info=$(btrfs subvolume show "$candidate" 2>/dev/null) || {
          echo "Warning: show failed for '$candidate'" >&2; continue
        }

        id=$(sed -n 's/^[[:space:]]*Subvolume ID:[[:space:]]*//p' <<<"$info" | head -1)
        name=$(sed -n 's/^[[:space:]]*Name:[[:space:]]*//p'      <<<"$info" | head -1)
        ref=$(sed -n 's/^[[:space:]]*Usage referenced:[[:space:]]*//p' <<<"$info" | head -1)
        exc=$(sed -n 's/^[[:space:]]*Usage exclusive:[[:space:]]*//p'  <<<"$info" | head -1)

        [[ -z "$id"   ]] && id="N/A"
        [[ -z "$name" ]] && name="$rel"
        [[ -z "$ref"  ]] && ref="N/A"
        [[ -z "$exc"  ]] && exc="N/A"

        printf '%s\t%s\t%s\t%s\n' "$id" "$name" "$ref" "$exc"
      done
}

# sort
sorted=$(generate_rows | "${sort_cmd[@]}")

# sum up Usage exclusive
total_exc=$(printf '%s\n' "$sorted" | \
  awk -F'\t' '
    function to_bytes(v,u){
      return (u=="B"?v:
             u=="KiB"?v*1024:
             u=="MiB"?v*(1024^2):
             u=="GiB"?v*(1024^3):
             u=="TiB"?v*(1024^4):v)
    }
    function human(b){
      if(b>=1024^4){unit="TiB"; val=b/(1024^4)}
      else if(b>=1024^3){unit="GiB"; val=b/(1024^3)}
      else if(b>=1024^2){unit="MiB"; val=b/(1024^2)}
      else if(b>=1024){unit="KiB"; val=b/1024}
      else{unit="B"; val=b}
      return sprintf("%.2f%s", val, unit)
    }
    /^[0-9]/ {
      size=$4
      if(size=="N/A") next
      match(size,/([0-9.]+)([KMGTP]?i?B)/,a)
      sum+=to_bytes(a[1],a[2])
    }
    END { print human(sum) }
  ')

# assemble, align, and inject separators
{
  echo -e "ID\tName\tUsage referenced\tUsage exclusive"
  printf '%s\n' "$sorted"
  # summary marker
  printf '\tTotal\t\t%s\n' "$total_exc"
} \
  | column -t -s $'\t' \
  | awk '
    NR==1 {
      header = $0
      print
      sep = sprintf("%*s", length(header), "")
      gsub(/ /, "-", sep)
      print sep
      next
    }
    # detect the Total line by the literal word "Total" in the Name column
    /^[[:space:]]*Total/ {
      print sep
      print
      next
    }
    { print }
  '
